// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VoV.Data.Context;

#nullable disable

namespace VoV.Data.Migrations
{
    [DbContext(typeof(VoVDbContext))]
    [Migration("20231013095631_meetingStatusAsPrivate1.2")]
    partial class meetingStatusAsPrivate12
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("VoV.Data.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("VoV.Data.Entities.AppSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("345ef14c-f86f-4716-9659-55b1dec2ca1a"),
                            CompanyId = new Guid("cf1d1c0c-2f49-4941-bda0-8f32232571b1")
                        });
                });

            modelBuilder.Entity("VoV.Data.Entities.Audit_DDL_Change", b =>
                {
                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Mod_Dt")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectSQL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectSchema")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Object_Host_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ObjectId");

                    b.ToTable("Audit_DDL_Changes");
                });

            modelBuilder.Entity("VoV.Data.Entities.BusinessSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("1");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BusinessSegments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("583c79a8-ee74-46e4-a946-6ecc9bd715d0"),
                            Active = true,
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aerospace industry"
                        },
                        new
                        {
                            Id = new Guid("515655a2-4432-438a-b264-fa0399432e3c"),
                            Active = true,
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Agricultural industry"
                        },
                        new
                        {
                            Id = new Guid("013ca040-e5e0-4563-b1a9-c3cdedc4241b"),
                            Active = true,
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Automotive industry"
                        },
                        new
                        {
                            Id = new Guid("35d20eff-481d-4907-8a26-2de3e479c91f"),
                            Active = true,
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chemical industry"
                        },
                        new
                        {
                            Id = new Guid("7a396f20-50c1-4f46-9383-e05abf23d086"),
                            Active = true,
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Computer industry"
                        },
                        new
                        {
                            Id = new Guid("c38dd507-ab7b-4dc6-8aca-5ea584832ce1"),
                            Active = true,
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Construction industry"
                        },
                        new
                        {
                            Id = new Guid("58bcb599-6860-43d4-8a0d-53739780eb69"),
                            Active = true,
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Defense industry"
                        },
                        new
                        {
                            Id = new Guid("04e16ff4-7f76-4a21-9915-68c9cfd3f412"),
                            Active = true,
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Education industry"
                        },
                        new
                        {
                            Id = new Guid("02ac7728-f244-45f4-9c48-784befb32a5a"),
                            Active = true,
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Entertainment industry"
                        },
                        new
                        {
                            Id = new Guid("aa49d145-2f39-4384-9471-1b093fadef00"),
                            Active = true,
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fashion industry"
                        },
                        new
                        {
                            Id = new Guid("e26cd5b5-ab62-4442-b335-455623379623"),
                            Active = true,
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hotels industry"
                        });
                });

            modelBuilder.Entity("VoV.Data.Entities.BusinessSubSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("BusinessSegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSegmentId", "Name")
                        .IsUnique();

                    b.ToTable("BusinessSubSegments");
                });

            modelBuilder.Entity("VoV.Data.Entities.BusinessUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("CompanyId", "Code")
                        .IsUnique();

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("BusinessUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89d82c7b-95ce-4e37-970f-516f30a63522"),
                            Active = false,
                            Code = "S",
                            CompanyId = new Guid("cf1d1c0c-2f49-4941-bda0-8f32232571b1"),
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sales"
                        },
                        new
                        {
                            Id = new Guid("13f6e635-5482-4f30-9336-c03e31c768de"),
                            Active = false,
                            Code = "P",
                            CompanyId = new Guid("cf1d1c0c-2f49-4941-bda0-8f32232571b1"),
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Purchase"
                        });
                });

            modelBuilder.Entity("VoV.Data.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CIFNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ClientGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("VisitingFrequencyInMonth")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ClientGroupId");

                    b.HasIndex("CompanyId", "CIFNo")
                        .IsUnique();

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BalanceAsOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nchar(3)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("ClientId", "AccountNo", "AccountTypeId")
                        .IsUnique();

                    b.ToTable("ClientAccounts");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientBusinessUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BusinessSegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("RoUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSegmentId");

                    b.HasIndex("RoUserId");

                    b.HasIndex("ClientId", "Name")
                        .IsUnique();

                    b.ToTable("ClientBusinessUnits");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ClientBusinessUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientBusinessUnitId");

                    b.HasIndex("ClientId", "Email")
                        .IsUnique();

                    b.HasIndex("ClientId", "Mobile")
                        .IsUnique();

                    b.ToTable("ClientEmployees");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientFinancial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nchar(3)");

                    b.Property<Guid>("FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Turnover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("FinancialYearId");

                    b.ToTable("ClientFinancials");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientFinancialFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ClientFinancialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientFinancialId", "FileName")
                        .IsUnique();

                    b.ToTable("ClientFinancialFiles");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("GroupCIFNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GroupName", "CompanyId")
                        .IsUnique();

                    b.ToTable("ClientGroups");
                });

            modelBuilder.Entity("VoV.Data.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("ADLoginYn")
                        .HasColumnType("bit");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("MobileIronYn")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ThemeDarkHexCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThemeLightHexCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf1d1c0c-2f49-4941-bda0-8f32232571b1"),
                            ADLoginYn = false,
                            Active = false,
                            Address = "Goregaon(West)",
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sentient2008@gmail.com",
                            MobileIronYn = false,
                            Name = "Sentient",
                            ThemeDarkHexCode = "#0560b2",
                            ThemeLightHexCode = "#e8f1fa"
                        });
                });

            modelBuilder.Entity("VoV.Data.Entities.CompanyObservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("BusinessSegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSegmentId");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("CompanyObservations");
                });

            modelBuilder.Entity("VoV.Data.Entities.CompanyOpportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("BusinessSegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSegmentId");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("CompanyOpportunities");
                });

            modelBuilder.Entity("VoV.Data.Entities.CompanyRisk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("BusinessSegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSegmentId");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("CompanyRisks");
                });

            modelBuilder.Entity("VoV.Data.Entities.Currency", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nchar(3)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Code");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("VoV.Data.Entities.Designation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("Designations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf1d1c0c-2f49-4941-bda0-8f32232571b1"),
                            Active = false,
                            Code = "RO",
                            CompanyId = new Guid("cf1d1c0c-2f49-4941-bda0-8f32232571b1"),
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Relationship Officer"
                        },
                        new
                        {
                            Id = new Guid("4870af54-c766-4e0a-a4ef-9f5fbc2201fc"),
                            Active = false,
                            Code = "TL",
                            CompanyId = new Guid("cf1d1c0c-2f49-4941-bda0-8f32232571b1"),
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Team Lead",
                            ParentId = new Guid("cf1d1c0c-2f49-4941-bda0-8f32232571b1")
                        },
                        new
                        {
                            Id = new Guid("290b0d1e-d796-4d36-b0fd-7679634f8c33"),
                            Active = false,
                            Code = "UH",
                            CompanyId = new Guid("cf1d1c0c-2f49-4941-bda0-8f32232571b1"),
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Unit Head",
                            ParentId = new Guid("4870af54-c766-4e0a-a4ef-9f5fbc2201fc")
                        });
                });

            modelBuilder.Entity("VoV.Data.Entities.FinancialYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("Abbr")
                        .IsUnique();

                    b.ToTable("FinancialYears");
                });

            modelBuilder.Entity("VoV.Data.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("CompanyId", "Code")
                        .IsUnique();

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b988bb1-83fb-4fe9-8611-c6101940ffe3"),
                            Active = false,
                            Code = "GRN",
                            CompanyId = new Guid("cf1d1c0c-2f49-4941-bda0-8f32232571b1"),
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Goregaon"
                        });
                });

            modelBuilder.Entity("VoV.Data.Entities.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Agenda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClientBusinessUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MeetingNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MeetingPurpose")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MeetingStatus")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(15)")
                        .HasComputedColumnSql("(case [MeetingStatusId] when (0) then 'Pending' when (1) then 'Expired' when (2) then 'Closed' when (3) then 'Rejected' when (4) then 'OnHold' end)", false);

                    b.Property<short>("MeetingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<DateTime>("ScheduledOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SrNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("VisitSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VisitedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientBusinessUnitId");

                    b.HasIndex("ClientEmployeeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("VoV.Data.Entities.MeetingClientAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ClientEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientEmployeeId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingClientAttendees");
                });

            modelBuilder.Entity("VoV.Data.Entities.MeetingCompanyAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingCompanyAttendees");
                });

            modelBuilder.Entity("VoV.Data.Entities.MeetingObservationAndOtherMatter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ActionDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("ActionRequired")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AssignedToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyObservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateOfClosing")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("date");

                    b.Property<bool>("IsCritical")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ObservationStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsibility")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CompanyObservationId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingObservationAndOtherMatters");
                });

            modelBuilder.Entity("VoV.Data.Entities.MeetingOpportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ActionDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("ActionRequired")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AssignedToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyOpportunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateOfClosing")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("date");

                    b.Property<bool>("IsCritical")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OpportunityStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsibility")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CompanyOpportunityId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingOpportunities");
                });

            modelBuilder.Entity("VoV.Data.Entities.MeetingRisk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ActionDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("ActionRequired")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AssignedToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyRiskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateOfClosing")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("date");

                    b.Property<bool>("IsCritical")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsibility")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RiskStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CompanyRiskId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingRisks");
                });

            modelBuilder.Entity("VoV.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d0bf51c-3c8f-45b0-9a16-2732b251e88d"),
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SiteAdmin"
                        },
                        new
                        {
                            Id = new Guid("76cde1f7-950e-4826-8666-bea361d27772"),
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("947d14f6-bad9-49c6-8830-781fc9807963"),
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DomainUser"
                        },
                        new
                        {
                            Id = new Guid("633d5fd6-776f-4af1-8f76-d52adde38d79"),
                            CreatedById = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("VoV.Data.Entities.StandardObservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("BusinessSegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSegmentId", "Name")
                        .IsUnique()
                        .HasFilter("[BusinessSegmentId] IS NOT NULL");

                    b.ToTable("StandardObservations");
                });

            modelBuilder.Entity("VoV.Data.Entities.StandardOpportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("BusinessSegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSegmentId", "Name")
                        .IsUnique()
                        .HasFilter("[BusinessSegmentId] IS NOT NULL");

                    b.ToTable("StandardOpportunities");
                });

            modelBuilder.Entity("VoV.Data.Entities.StandardRisk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("BusinessSegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSegmentId", "Name")
                        .IsUnique()
                        .HasFilter("[BusinessSegmentId] IS NOT NULL");

                    b.ToTable("StandardRisks");
                });

            modelBuilder.Entity("VoV.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("BusinessUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("DesignationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmpCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("JwtToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JwtTokenExpiresOn")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ReportingToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ReportingToUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("CompanyId", "EmpCode")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL AND [EmpCode] IS NOT NULL");

                    b.HasIndex("CompanyId", "UserName")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9bad75f9-442e-447a-8385-4f7fe824fa90"),
                            Active = true,
                            CompanyId = new Guid("cf1d1c0c-2f49-4941-bda0-8f32232571b1"),
                            CreatedById = new Guid("5a776123-b65e-4f67-9bfe-7a177922100c"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sentient2008@gmail.com",
                            EmpCode = "VOV_SENTI_001",
                            LocationId = new Guid("3b988bb1-83fb-4fe9-8611-c6101940ffe3"),
                            Mobile = "9969875308",
                            Name = "Sentient Admin",
                            Password = "2220tbYOIVYfrreLt4BsDg==",
                            RoleId = new Guid("76cde1f7-950e-4826-8666-bea361d27772"),
                            UserName = "SentientAdmin"
                        });
                });

            modelBuilder.Entity("VoV.Data.Entities.AppSetting", b =>
                {
                    b.HasOne("VoV.Data.Entities.Company", "Company")
                        .WithMany("AppSettings")
                        .HasForeignKey("CompanyId")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("VoV.Data.Entities.BusinessSubSegment", b =>
                {
                    b.HasOne("VoV.Data.Entities.BusinessSegment", "BusinessSegment")
                        .WithMany("BusinessSubSegments")
                        .HasForeignKey("BusinessSegmentId")
                        .IsRequired()
                        .HasConstraintName("FK_BusinessSubSegment_BusinessSegment");

                    b.Navigation("BusinessSegment");
                });

            modelBuilder.Entity("VoV.Data.Entities.BusinessUnit", b =>
                {
                    b.HasOne("VoV.Data.Entities.Company", "Company")
                        .WithMany("BusinessUnits")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_BusinessUnits_Company");

                    b.HasOne("VoV.Data.Entities.BusinessUnit", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_BusinessUnits_BusinessUnits");

                    b.Navigation("Company");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("VoV.Data.Entities.Client", b =>
                {
                    b.HasOne("VoV.Data.Entities.ClientGroup", "ClientGroup")
                        .WithMany("Clients")
                        .HasForeignKey("ClientGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Clients_ClientGroup");

                    b.HasOne("VoV.Data.Entities.Company", "Company")
                        .WithMany("Clients")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Clients_Company");

                    b.Navigation("ClientGroup");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientAccount", b =>
                {
                    b.HasOne("VoV.Data.Entities.AccountType", "AccountType")
                        .WithMany("ClientAccounts")
                        .HasForeignKey("AccountTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientAccounts_AccountType");

                    b.HasOne("VoV.Data.Entities.Client", "Client")
                        .WithMany("ClientAccounts")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientAccounts_Client");

                    b.HasOne("VoV.Data.Entities.Currency", "Currency")
                        .WithMany("ClientAccounts")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("FK_ClientAccounts_Currency");

                    b.Navigation("AccountType");

                    b.Navigation("Client");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientBusinessUnit", b =>
                {
                    b.HasOne("VoV.Data.Entities.BusinessSegment", "BusinessSegment")
                        .WithMany("ClientBusinessUnits")
                        .HasForeignKey("BusinessSegmentId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientBusinessUnit_BusinessSegment");

                    b.HasOne("VoV.Data.Entities.Client", "Client")
                        .WithMany("ClientBusinessUnits")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientBusinessUnit_Client");

                    b.HasOne("VoV.Data.Entities.User", "RoUser")
                        .WithMany("ClientBusinessUnits")
                        .HasForeignKey("RoUserId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientBusinessUnit_User");

                    b.Navigation("BusinessSegment");

                    b.Navigation("Client");

                    b.Navigation("RoUser");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientEmployee", b =>
                {
                    b.HasOne("VoV.Data.Entities.ClientBusinessUnit", "ClientBusinessUnit")
                        .WithMany("ClientEmployees")
                        .HasForeignKey("ClientBusinessUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientEmployees_ClientBusinessUnit");

                    b.HasOne("VoV.Data.Entities.Client", "Client")
                        .WithMany("ClientEmployees")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientEmployees_Client");

                    b.Navigation("Client");

                    b.Navigation("ClientBusinessUnit");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientFinancial", b =>
                {
                    b.HasOne("VoV.Data.Entities.Client", "Client")
                        .WithMany("ClientFinancials")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientFinancials_Client");

                    b.HasOne("VoV.Data.Entities.Currency", "Currency")
                        .WithMany("ClientFinancials")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("FK_ClientFinancials_Currency");

                    b.HasOne("VoV.Data.Entities.FinancialYear", "FinancialYear")
                        .WithMany("ClientFinancials")
                        .HasForeignKey("FinancialYearId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientFinancials_FinancialYear");

                    b.Navigation("Client");

                    b.Navigation("Currency");

                    b.Navigation("FinancialYear");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientFinancialFile", b =>
                {
                    b.HasOne("VoV.Data.Entities.ClientFinancial", "ClientFinancial")
                        .WithMany("ClientFinancialFiles")
                        .HasForeignKey("ClientFinancialId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientFinancialFiles_ClientFinancial");

                    b.Navigation("ClientFinancial");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientGroup", b =>
                {
                    b.HasOne("VoV.Data.Entities.Company", "Company")
                        .WithMany("ClientGroups")
                        .HasForeignKey("CompanyId")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("VoV.Data.Entities.CompanyObservation", b =>
                {
                    b.HasOne("VoV.Data.Entities.BusinessSegment", "BusinessSegment")
                        .WithMany("CompanyObservations")
                        .HasForeignKey("BusinessSegmentId")
                        .HasConstraintName("FK_CompanyObservations_BusinessSegment");

                    b.HasOne("VoV.Data.Entities.Company", "Company")
                        .WithMany("CompanyObservations")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyObservations_Company");

                    b.Navigation("BusinessSegment");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("VoV.Data.Entities.CompanyOpportunity", b =>
                {
                    b.HasOne("VoV.Data.Entities.BusinessSegment", "BusinessSegment")
                        .WithMany("CompanyOpportunities")
                        .HasForeignKey("BusinessSegmentId")
                        .HasConstraintName("FK_CompanyOpportunities_BusinessSegment");

                    b.HasOne("VoV.Data.Entities.Company", "Company")
                        .WithMany("CompanyOpportunities")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyOpportunities_Company");

                    b.Navigation("BusinessSegment");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("VoV.Data.Entities.CompanyRisk", b =>
                {
                    b.HasOne("VoV.Data.Entities.BusinessSegment", "BusinessSegment")
                        .WithMany("CompanyRisks")
                        .HasForeignKey("BusinessSegmentId")
                        .HasConstraintName("FK_CompanyRisks_BusinessSegment");

                    b.HasOne("VoV.Data.Entities.Company", "Company")
                        .WithMany("CompanyRisks")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyRisks_Company");

                    b.Navigation("BusinessSegment");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("VoV.Data.Entities.Designation", b =>
                {
                    b.HasOne("VoV.Data.Entities.Company", "Company")
                        .WithMany("Designations")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Designations_Company");

                    b.HasOne("VoV.Data.Entities.Designation", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Designations_Designations");

                    b.Navigation("Company");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("VoV.Data.Entities.Location", b =>
                {
                    b.HasOne("VoV.Data.Entities.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Location_Company");

                    b.HasOne("VoV.Data.Entities.Location", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Location_Location");

                    b.Navigation("Company");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("VoV.Data.Entities.Meeting", b =>
                {
                    b.HasOne("VoV.Data.Entities.ClientBusinessUnit", "ClientBusinessUnit")
                        .WithMany("Meetings")
                        .HasForeignKey("ClientBusinessUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_Meeting_ClientBusinessUnit");

                    b.HasOne("VoV.Data.Entities.ClientEmployee", "ClientEmployee")
                        .WithMany("Meetings")
                        .HasForeignKey("ClientEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_Meeting_ClientEmployee");

                    b.HasOne("VoV.Data.Entities.Client", "Client")
                        .WithMany("Meetings")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Meeting_Client");

                    b.HasOne("VoV.Data.Entities.Company", "Company")
                        .WithMany("Meetings")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Meeting_Company");

                    b.HasOne("VoV.Data.Entities.User", "CompanyUser")
                        .WithMany("Meetings")
                        .HasForeignKey("CompanyUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Meeting_CompanyUser");

                    b.Navigation("Client");

                    b.Navigation("ClientBusinessUnit");

                    b.Navigation("ClientEmployee");

                    b.Navigation("Company");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("VoV.Data.Entities.MeetingClientAttendee", b =>
                {
                    b.HasOne("VoV.Data.Entities.ClientEmployee", "ClientEmployee")
                        .WithMany("MeetingClientAttendees")
                        .HasForeignKey("ClientEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingClientAttendee_ClientEmployee");

                    b.HasOne("VoV.Data.Entities.Meeting", "Meeting")
                        .WithMany("MeetingClientAttendees")
                        .HasForeignKey("MeetingId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingClientAttendee_Meeting");

                    b.Navigation("ClientEmployee");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("VoV.Data.Entities.MeetingCompanyAttendee", b =>
                {
                    b.HasOne("VoV.Data.Entities.User", "CompanyUser")
                        .WithMany("MeetingCompanyAttendees")
                        .HasForeignKey("CompanyUserId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingCompanyAttendee_User");

                    b.HasOne("VoV.Data.Entities.Meeting", "Meeting")
                        .WithMany("MeetingCompanyAttendees")
                        .HasForeignKey("MeetingId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingCompanyAttendee_Meeting");

                    b.Navigation("CompanyUser");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("VoV.Data.Entities.MeetingObservationAndOtherMatter", b =>
                {
                    b.HasOne("VoV.Data.Entities.User", "AssignedToUser")
                        .WithMany("MeetingObservations")
                        .HasForeignKey("AssignedToUserId")
                        .HasConstraintName("FK_MeetingObservationAndOtherMatter_User");

                    b.HasOne("VoV.Data.Entities.CompanyObservation", "CompanyObservation")
                        .WithMany("MeetingObservations")
                        .HasForeignKey("CompanyObservationId")
                        .HasConstraintName("FK_MeetingObservationAndOtherMatter_CompanyObservation");

                    b.HasOne("VoV.Data.Entities.Meeting", "Meeting")
                        .WithMany("MeetingObservations")
                        .HasForeignKey("MeetingId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingObservationAndOtherMatter_Meeting");

                    b.Navigation("AssignedToUser");

                    b.Navigation("CompanyObservation");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("VoV.Data.Entities.MeetingOpportunity", b =>
                {
                    b.HasOne("VoV.Data.Entities.User", "AssignedToUser")
                        .WithMany("MeetingOpportunites")
                        .HasForeignKey("AssignedToUserId")
                        .HasConstraintName("FK_MeetingOpportunity_User");

                    b.HasOne("VoV.Data.Entities.CompanyOpportunity", "CompanyOpportunity")
                        .WithMany("MeetingOpportunites")
                        .HasForeignKey("CompanyOpportunityId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingOpportunity_CompanyOpportunity");

                    b.HasOne("VoV.Data.Entities.Meeting", "Meeting")
                        .WithMany("MeetingOpportunities")
                        .HasForeignKey("MeetingId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingOpportunity_Meeting");

                    b.Navigation("AssignedToUser");

                    b.Navigation("CompanyOpportunity");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("VoV.Data.Entities.MeetingRisk", b =>
                {
                    b.HasOne("VoV.Data.Entities.User", "AssignedToUser")
                        .WithMany("MeetingRisks")
                        .HasForeignKey("AssignedToUserId")
                        .HasConstraintName("FK_MeetingRisk_User");

                    b.HasOne("VoV.Data.Entities.CompanyRisk", "CompanyRisk")
                        .WithMany("MeetingRisks")
                        .HasForeignKey("CompanyRiskId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingRisk_CompanyRisk");

                    b.HasOne("VoV.Data.Entities.Meeting", "Meeting")
                        .WithMany("MeetingRisks")
                        .HasForeignKey("MeetingId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingRisk_Meeting");

                    b.Navigation("AssignedToUser");

                    b.Navigation("CompanyRisk");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("VoV.Data.Entities.StandardObservation", b =>
                {
                    b.HasOne("VoV.Data.Entities.BusinessSegment", "BusinessSegment")
                        .WithMany("StandardObservations")
                        .HasForeignKey("BusinessSegmentId");

                    b.Navigation("BusinessSegment");
                });

            modelBuilder.Entity("VoV.Data.Entities.StandardOpportunity", b =>
                {
                    b.HasOne("VoV.Data.Entities.BusinessSegment", "BusinessSegment")
                        .WithMany("StandardOpportunities")
                        .HasForeignKey("BusinessSegmentId");

                    b.Navigation("BusinessSegment");
                });

            modelBuilder.Entity("VoV.Data.Entities.StandardRisk", b =>
                {
                    b.HasOne("VoV.Data.Entities.BusinessSegment", "BusinessSegment")
                        .WithMany("StandardRisks")
                        .HasForeignKey("BusinessSegmentId");

                    b.Navigation("BusinessSegment");
                });

            modelBuilder.Entity("VoV.Data.Entities.User", b =>
                {
                    b.HasOne("VoV.Data.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany("Users")
                        .HasForeignKey("BusinessUnitId")
                        .HasConstraintName("FK_Users_BusinessUnit");

                    b.HasOne("VoV.Data.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Users_Company");

                    b.HasOne("VoV.Data.Entities.Designation", "Designation")
                        .WithMany("Users")
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("FK_Users_Designation");

                    b.HasOne("VoV.Data.Entities.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Users_Location");

                    b.HasOne("VoV.Data.Entities.User", "ReportingToUser")
                        .WithMany("InverseReportingToUser")
                        .HasForeignKey("ReportingToUserId")
                        .HasConstraintName("FK_Users_ReportingUsers");

                    b.HasOne("VoV.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Role");

                    b.Navigation("BusinessUnit");

                    b.Navigation("Company");

                    b.Navigation("Designation");

                    b.Navigation("Location");

                    b.Navigation("ReportingToUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("VoV.Data.Entities.AccountType", b =>
                {
                    b.Navigation("ClientAccounts");
                });

            modelBuilder.Entity("VoV.Data.Entities.BusinessSegment", b =>
                {
                    b.Navigation("BusinessSubSegments");

                    b.Navigation("ClientBusinessUnits");

                    b.Navigation("CompanyObservations");

                    b.Navigation("CompanyOpportunities");

                    b.Navigation("CompanyRisks");

                    b.Navigation("StandardObservations");

                    b.Navigation("StandardOpportunities");

                    b.Navigation("StandardRisks");
                });

            modelBuilder.Entity("VoV.Data.Entities.BusinessUnit", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VoV.Data.Entities.Client", b =>
                {
                    b.Navigation("ClientAccounts");

                    b.Navigation("ClientBusinessUnits");

                    b.Navigation("ClientEmployees");

                    b.Navigation("ClientFinancials");

                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientBusinessUnit", b =>
                {
                    b.Navigation("ClientEmployees");

                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientEmployee", b =>
                {
                    b.Navigation("MeetingClientAttendees");

                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientFinancial", b =>
                {
                    b.Navigation("ClientFinancialFiles");
                });

            modelBuilder.Entity("VoV.Data.Entities.ClientGroup", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("VoV.Data.Entities.Company", b =>
                {
                    b.Navigation("AppSettings");

                    b.Navigation("BusinessUnits");

                    b.Navigation("ClientGroups");

                    b.Navigation("Clients");

                    b.Navigation("CompanyObservations");

                    b.Navigation("CompanyOpportunities");

                    b.Navigation("CompanyRisks");

                    b.Navigation("Designations");

                    b.Navigation("Locations");

                    b.Navigation("Meetings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VoV.Data.Entities.CompanyObservation", b =>
                {
                    b.Navigation("MeetingObservations");
                });

            modelBuilder.Entity("VoV.Data.Entities.CompanyOpportunity", b =>
                {
                    b.Navigation("MeetingOpportunites");
                });

            modelBuilder.Entity("VoV.Data.Entities.CompanyRisk", b =>
                {
                    b.Navigation("MeetingRisks");
                });

            modelBuilder.Entity("VoV.Data.Entities.Currency", b =>
                {
                    b.Navigation("ClientAccounts");

                    b.Navigation("ClientFinancials");
                });

            modelBuilder.Entity("VoV.Data.Entities.Designation", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VoV.Data.Entities.FinancialYear", b =>
                {
                    b.Navigation("ClientFinancials");
                });

            modelBuilder.Entity("VoV.Data.Entities.Location", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VoV.Data.Entities.Meeting", b =>
                {
                    b.Navigation("MeetingClientAttendees");

                    b.Navigation("MeetingCompanyAttendees");

                    b.Navigation("MeetingObservations");

                    b.Navigation("MeetingOpportunities");

                    b.Navigation("MeetingRisks");
                });

            modelBuilder.Entity("VoV.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("VoV.Data.Entities.User", b =>
                {
                    b.Navigation("ClientBusinessUnits");

                    b.Navigation("InverseReportingToUser");

                    b.Navigation("MeetingCompanyAttendees");

                    b.Navigation("MeetingObservations");

                    b.Navigation("MeetingOpportunites");

                    b.Navigation("MeetingRisks");

                    b.Navigation("Meetings");
                });
#pragma warning restore 612, 618
        }
    }
}
